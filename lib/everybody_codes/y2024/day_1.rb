def first
  input = 'CAABCBCBAACAACCBACACBCABCBCBCACBACBCACBAABCBCBCAABCBACABBBCCCBCBABACCCCABABCBCCBBCBCCABACBBBBABBCBACBBACABBCCBABAACCCBCCCAABCAABBCABBAACAABBAABABBABABCABBABCBAACBCCBAAACCAABBAAAAABBCCCCAACCBCCAAACABCBCAABBACBBBCACACABABCBBACBBCABCCBCABCBCCABCACACACBABCABCCAACBCABAABCBABCCBACBCAACCCCACCCACCBACBCCACBCCCABAAAAAACAABCAABBCBBAAABBBABABCCBCCBCABBCBCBCAABBBCAABABABCBACBAACBCAABBCACBACACBCABBBCBBACACBCCBACBACCBBBCCBAACCCBBABCBBBABCACAABCCABBABCCABAAACBAABBABAACCCCABBBCACBBAAAABBBBABCAACBBBBACBBBCCBACCCCCACCCACACCACCBBBCAAACCBBABABCAACBAABBACBACCACABABBCACCABCACBCACAACBBACACCBCAAAAAABCCCABACAACBAABBCAAABCBACABCABBCACACBCACCBBBCBCBACCBACACABCABACCACBCABACABABCBBBAACBCBBACABBABCCAAABBBBBCAABCACCBABBCAABBBBBCACCABACBCBCBBCABABCCCABABBBBCBCAAABCCCACCCACAAAACAACAABBCBABCCCCABBCACBCAACCCACABAABBCACBABCBCBCCBCBACCBCABBCCCACBACABACAABABCACCACBABCCCBBCBCBCBBAAACCABCAAABBBABBCABBBCBBABBCCABBBAACCBCCCCABBCABABBCCBACCABAAABBAACABBBBACBCACABBABCBBAABCCAABAAACBBCBBABBACACBACBCABCCCABACCBBAACCABABBABBBAACABCA'

  input.chars.map do |char|
    case char
    when 'A' then 0
    when 'B' then 1
    when 'C' then 3
    end
  end.sum
end

def second
  input = 'DBBCDAACBBDBBBADxDDxABxCDDDBCBCDCDAADCCCxACDDACCDDBCBCDCDxCCBxCAAACAAxxBDCAADBBDCDADxBCCBDABCCAAAxCBDADACBADAxAABCABCxCCADDBBDDDDDCDCDxCCxDDAxCBDDACDBBDDCCCBDxDBCBCACxxDxBADBBDAACDxCDCxCDBCCCCDDCDxCBCBCCDDDxCABAAAAAAxDxCxBCCAxDCCCAADCACDxADDABDCABCDDAADABCBCCBDCADCxCADCDCCDDDDCxCxBCBDBAxDxCBBBBCDBAxCCxDCCBDBCDDCDxACCxBDCBADAxxxCCCDDCxBBACBADADACDxDCDCDABCCAADCDCACADDxBxCADBDCDCABDBABCDACDCDBBDBBBDACCDDDDCDBCAxCAAACBBDBDxCBCBDBDBxCBxDxAABCxCBCBxDCCCBBADDCxCDCBDBxxxBxDCABCDBCBCCADCCCCDCADDACBBBBADAABADxCCDCxBAADBADABxADADAABBCxDADBBxBBDDAxDDCACAAxADCDCDxDAxCBACBBCAAAACCCDBBDABDCDDBCDxAACxAAAAxADAACCCCCABDxDBCBDBBBDBCBDDAxBABBCBCAAxxDBCxDABCDDCDACABxCDCDCADDDxCDDCABxAxAABBxADBCABBDBABDxAACCDCABxCBADAABCxACADCDDAxACACABBACCDDDBBxxDCCDDBABBDCCAxABACCBAxBCBDADCCCBCBCBAABDDxCAxBBDBCDDCxCDBDADDDDCDABDDAAxCAxBADCCCxCCCDAABACDDABxDDDAAAxBABCxDxADAABACBABABAxADCxACxCCDADDBADBCBDCDxBAABADDBDCBxBDBCCDCABDAAABABxCAADxAxBxCBBCDBCCDBCxDCBCxABBACBxBCDCABBBDBBADxCDDCDxBACxADAxBDBDAADDDxBxCBDADxCACxCACCDDxCCDxADBABBBACBCBCBDCxAADCACDDDCxDBBDDxDABDDCADADxxDADADADBDDADBDCDADDAADDADCBCADxDDDBBxACBBxAxCBDCBCBDBABBCBCBADCBACAxDADxCxABBBABACBADDCBADDDADADBAxCAADBCBCCCAxDCxABCACBABxCCCCCBCBAxBxCCAxDxBABBDBABxDDDDAxACDBCCCCDDACDDDBACDBABCBDDDDxBBBAAAABxBAAAxBBDCDCBDDDCDAADADAxAACBBABCAAxCBCADABBDCDxACCDABxAxCBxxADBCCBCDBDCCCDxDxxCBDCBABCxADAADAACCADxADCBBABCDCBDCDCBDDCDxxCBCACDACBAABCDBBxDDADDDABCDCDCxxCBDDCBCBxxCDDDBDBCDAAABBDAACCxDACCxCBBCCDDxCDBxABDCAxDxxCCDCACDDCABABDABxAxxBDCAACBACCCBCBBxADABDxCABBBxCABDCBxBBADCCBxBABACDCDDACxCDABCBDCACxxAABxCCCBDCBACBBDxCDDCxxCCDDBBDBxBxDxDBCxDBABCBACBDxDAxCCBDBxBBBxDAAxAxDBCxCADDAACADAABDDABxCCCBxCBCDDBDCAxBADCDAAADBDDBDCCCDDBCBxDACBxxBCxCCACDAACDCCCADBCCBCABDBxBDACDCADDDCCAABBAxBCBDBAAxDDBDBADDxAAACCDBxAAADDCBCxCABBDACxABABCADADCCCBBCBBDBCAACABADDCCDADAAxBBxDBCBDDBDxAAABCCDAABCBDAAACDBCDBDADxxAACDDBBCAxCBAxABBCBCDCACADCAxxDxxxxxxxCCCABCBBDADxACCxBBDBCBDBBCDCADDADDBBxABCxADBxACxBBACAADACDAACBCBCDBBCACxDAAxCCxDADDAAAAxxDADCDDAAABBCDACBxCDBABxDCCBCCxxCCA'

  input.scan(/(..)/).flat_map do |pair|
    c1, c2 = pair.first.chars.sort

    [c1, c2].map do |c|
      potions = case c
                when 'A' then 0
                when 'B' then 1
                when 'C' then 3
                when 'D' then 5
                when 'x' then 0
                end

      potions + (c2 == 'x' ? 0 : 1)
    end
  end.sum
end

def third
  input = ''

  input.scan(/(...)/).flat_map do |pair|
    arr = pair.first.chars.reject { |char| char == 'x' }

    arr.map do |c|
      potions = case c
                when 'A' then 0
                when 'B' then 1
                when 'C' then 3
                when 'D' then 5
                end

      potions + (if arr.size == 3
                   2
                 else
                   arr.size == 2 ? 1 : 0
                 end)
    end
  end.sum
end
